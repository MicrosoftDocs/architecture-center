{
    "title": "Building microservices on Azure",
    "description": "Designing, building, and operating microservices architectures on Azure",
    "iconPath": "../_images/microservices.svg",
    "summary": "Microservices are a popular architectural style for building applications that are resilient, highly scalable, independently deployable, and able to evolve quickly. But a successful microservices architecture requires a different approach to designing and building applications.",
    "sections": [
        {
            "cards": [
                {
                    "title": "What are microservices?",
                    "url": "./introduction.md",
                    "summary": "How do microservices differ from other architectures, and when should you use them?"
                },
                {
                    "title": "Microservices architecture style",
                    "url": "../guide/architecture-styles/microservices.md",
                    "summary": "High-level overview of the microservices architecture style"
                }
            ]
        },
        {
            "heading": "Examples of microservices architectures",
            "cards": [
                {
                    "title": "Use Service Fabric to decompose monolithic applications",
                    "url": "../example-scenario/infrastructure/service-fabric-microservices.yml",
                    "summary": "An iterative approach to decomposing an ASP.NET web site into microservices."
                },
                {
                    "title": "Scalable order processing on Azure",
                    "url": "../example-scenario/data/ecommerce-order-processing.md",
                    "summary":"Order processing using a functional programming model implemented via microservices."
                }
            ]
        },
        {
            "heading": "Build a microservices application",
            "cards": [
                {
                    "title": "Use domain analysis to model microservices",
                    "url": "./model/domain-analysis.md",
                    "summary": "To avoid some common pitfalls when designing microservices, use domain analysis to define your microservice boundaries."
                },
                {
                    "title": "Reference architecture for Azure Kubernetes Services (AKS)",
                    "url": "../reference-architectures/microservices/aks.md",
                    "summary": "This reference architecture shows a basic AKS configuration that can be the starting point for most deployments."
                },
                {
                    "title": "Reference architecture for Azure Service Fabric",
                    "url": "../reference-architectures/microservices/service-fabric.yml",
                    "summary":"This reference architecture shows recommended configuration that can be the starting point for most deployments."
                },
                {
                    "title": "Design a microservices architecture",
                    "url": "./design/index.md",
                    "summary": "These articles dive deep into how to build a microservices application, based on a reference implementation that uses Azure Kubernetes Services (AKS)."
                },
                {
                    "title": "Design patterns",
                    "url": "./design/patterns.md",
                    "summary":"A set of useful design patterns for microservices."
                }
            ]
        },
        {
            "heading": "Operate microservices in production",
            "cards": [
                {
                    "title": "Logging and monitoring",
                    "url": "./logging-monitoring.md",
                    "summary": "The distributed nature of microservices architectures makes logging and monitoring especially critical."
                },
                {
                    "title": "Continuous integration and deployment",
                    "url": "./ci-cd.md",
                    "summary":"Continuous integration and continuous delivery (CI/CD) are key to achieving success with microservices."
                }
            ]
        }
    ]
}